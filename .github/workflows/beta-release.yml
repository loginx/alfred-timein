name: Beta Release

on:
  push:
    branches: [dev]

jobs:
  beta-release:
    name: Beta Release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate beta version
        id: version
        run: |
          # Use commit count and short SHA for beta version
          COUNT=$(git rev-list --count HEAD)
          SHA=$(git rev-parse --short HEAD)
          VERSION="v0.0.0-beta.${COUNT}+${SHA}"
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "Beta version: ${VERSION}"
          
      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            # If no tags, get all commits
            COMMITS=$(git log --pretty=format:"- %s" --reverse)
          else
            # Get commits since last tag
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s" --reverse)
          fi
          
          # Filter and categorize commits
          FEATURES=$(echo "$COMMITS" | grep "^- feat:" | sed 's/^- feat: /- /' || true)
          FIXES=$(echo "$COMMITS" | grep "^- fix:" | sed 's/^- fix: /- /' || true)
          REFACTOR=$(echo "$COMMITS" | grep "^- refactor:" | sed 's/^- refactor: /- /' || true)
          CHORES=$(echo "$COMMITS" | grep "^- chore:" | sed 's/^- chore: /- /' || true)
          CI=$(echo "$COMMITS" | grep "^- ci:" | sed 's/^- ci: /- /' || true)
          
          # Build changelog
          CHANGELOG=""
          if [ -n "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### Features${FEATURES}\n\n"
          fi
          if [ -n "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### Bug Fixes${FIXES}\n\n"
          fi
          if [ -n "$REFACTOR" ]; then
            CHANGELOG="${CHANGELOG}### Code Refactoring${REFACTOR}\n\n"
          fi
          if [ -n "$CI" ]; then
            CHANGELOG="${CHANGELOG}### CI/CD${CI}\n\n"
          fi
          if [ -n "$CHORES" ]; then
            CHANGELOG="${CHANGELOG}### Maintenance${CHORES}\n\n"
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
          
      - name: Run tests
        run: go test ./...
        
      - name: Run BDD tests
        run: go test -tags=bdd -run TestBDD -timeout 60s
        
      - name: Build Go binaries (amd64)
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o geotz_amd64 ./cmd/geotz
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o timein_amd64 ./cmd/timein
          
      - name: Build Go binaries (arm64)
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o geotz_arm64 ./cmd/geotz
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o timein_arm64 ./cmd/timein
          
      - name: Create universal binaries
        run: |
          lipo -create -output geotz geotz_amd64 geotz_arm64
          lipo -create -output timein timein_amd64 timein_arm64
          rm geotz_amd64 geotz_arm64 timein_amd64 timein_arm64
          
      - name: Update workflow version for beta
        run: |
          plutil -replace version -string "${{ steps.version.outputs.version }}" info.plist
          
      - name: Prepare Go binaries for beta release
        run: |
          chmod +x geotz timein
          
      - name: Create Alfred workflow archive for beta
        run: |
          make alfredworkflow
          mv TimeIn.alfredworkflow TimeIn-${{ steps.version.outputs.version }}.alfredworkflow
          
      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: "alfred-timein ${{ steps.version.outputs.version }}"
          body: |
            Beta release from the dev branch for testing new features.
            
            WARNING: This is not a stable release. Use at your own risk.
            
            ## Changes Since Last Release
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            Download TimeIn-${{ steps.version.outputs.version }}.alfredworkflow and open with Alfred.
            
            Build: ${{ github.sha }}
          files: |
            TimeIn-${{ steps.version.outputs.version }}.alfredworkflow
            geotz
            timein
          prerelease: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}