name: Stable Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    name: Release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract version from tag
        id: get_version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
        
      - name: Generate changelog
        id: changelog
        run: |
          # Get previous release tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 "${CURRENT_TAG}^" 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tags, get all commits
            COMMITS=$(git log --pretty=format:"- %s" --reverse)
          else
            # Get commits since previous release
            COMMITS=$(git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:"- %s" --reverse)
          fi
          
          # Filter and categorize commits
          FEATURES=$(echo "$COMMITS" | grep "^- feat:" | sed 's/^- feat: /- /' || true)
          FIXES=$(echo "$COMMITS" | grep "^- fix:" | sed 's/^- fix: /- /' || true)
          REFACTOR=$(echo "$COMMITS" | grep "^- refactor:" | sed 's/^- refactor: /- /' || true)
          CHORES=$(echo "$COMMITS" | grep "^- chore:" | sed 's/^- chore: /- /' || true)
          CI=$(echo "$COMMITS" | grep "^- ci:" | sed 's/^- ci: /- /' || true)
          DOCS=$(echo "$COMMITS" | grep "^- docs:" | sed 's/^- docs: /- /' || true)
          
          # Build changelog
          CHANGELOG=""
          if [ -n "$FEATURES" ]; then
            CHANGELOG="${CHANGELOG}### Features\n${FEATURES}\n\n"
          fi
          if [ -n "$FIXES" ]; then
            CHANGELOG="${CHANGELOG}### Bug Fixes\n${FIXES}\n\n"
          fi
          if [ -n "$REFACTOR" ]; then
            CHANGELOG="${CHANGELOG}### Code Refactoring\n${REFACTOR}\n\n"
          fi
          if [ -n "$DOCS" ]; then
            CHANGELOG="${CHANGELOG}### Documentation\n${DOCS}\n\n"
          fi
          if [ -n "$CI" ]; then
            CHANGELOG="${CHANGELOG}### CI/CD\n${CI}\n\n"
          fi
          if [ -n "$CHORES" ]; then
            CHANGELOG="${CHANGELOG}### Maintenance\n${CHORES}\n\n"
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo -e "$CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'
      - name: Run Go tests
        run: go test ./...
      - name: Run BDD tests
        run: go test -tags=bdd -run TestBDD -timeout 60s
      - name: Build Go binaries (amd64)
        run: |
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o geotz_amd64 ./cmd/geotz
          GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w" -trimpath -o timein_amd64 ./cmd/timein
      - name: Build Go binaries (arm64)
        run: |
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o geotz_arm64 ./cmd/geotz
          GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w" -trimpath -o timein_arm64 ./cmd/timein
      - name: Create universal binaries with lipo
        run: |
          lipo -create -output geotz geotz_amd64 geotz_arm64
          lipo -create -output timein timein_amd64 timein_arm64
          rm geotz_amd64 geotz_arm64 timein_amd64 timein_arm64
      - name: Prepare Go binaries for release
        run: |
          chmod +x geotz timein
      - name: Create Alfred workflow archive
        run: |
          make alfredworkflow VERSION="${{ steps.get_version.outputs.version }}"
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "alfred-timein v${{ steps.get_version.outputs.version }}"
          body: |
            A reliable Alfred workflow for timezone lookups and time conversion.
            
            ## What's Changed
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            
            Download TimeIn.alfredworkflow and open with Alfred.
            
            ## CLI Tools
            
            Download individual command-line tools:
            - `geotz` - Timezone lookup by coordinates
            - `timein` - Time conversion and display
          files: |
            TimeIn.alfredworkflow
            geotz
            timein
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 